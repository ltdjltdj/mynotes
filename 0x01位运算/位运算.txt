lowbit定义为非负整数n在二进制表示下“最低位的1及其后边的所有0”构成的数值
lowbit配合hash可以找出整数二进制表示下的所有的是1 的位数。

const int N=1<<20;
int H[N+1];
for(int i=0;i<=20;i++)
    H[1<<i]=i;
while(cin>>n)
{
    while(n>0){
    	cout<<H[n&-n]<<" ";
    	n-=n&-n;
    }
	cout<<endl;
}


AcWing 26. 二进制中1的个数
输入一个32位整数，输出该数二进制表示中1的个数。

class Solution {
public:
    int NumberOf1(int n) {
        int res = 0;
        while (n) {
            n -= n & -n;
            res += 1;
        }
        return res;
    }
};
Acwing 89. a^b（快速幂）
求a的b次方对p取模的值。
#include <bits/stdc++.h>
using namespace std;
using ll = long long;
const int maxn = 1e5 + 6;

int n, m, s, t;
int ai[maxn];
int a, b, p;

ll qpow(int a, int b, int mod)
{
    ll res = 1;
    while(b) {
        if(b & 1) res = 1ll * res * a % mod;
        a = 1ll * a * a % mod;
        b >>= 1;
    }
    return res % mod;
}

int main()
{ 
    scanf("%d%d%d", &a, &b, &p);
    cout << qpow(a, b, p) << endl;
    return 0;
}

AcWing 90. 64位整数乘法（快速乘）
求a乘b对p取模的值。

#include<bits/stdc++.h>
#define ls (p<<1)
#define rs (p<<1|1)
//#define mid (l+r)/2
#define over(i,s,t) for(register long long i=s;i<=t;++i)
#define lver(i,t,s) for(register long long i=t;i>=s;--i)
//#define int __int128
using namespace std;
typedef long long ll;//全用ll可能会MLE或者直接WA,试着改成int看会不会A
const ll N=1e5+7;
const ll mod=1e9+7;
const double EPS=1e-10;//-10次方约等于趋近为0

inline ll qmul(ll x,ll y,ll p)
{
    ll z=(long double)x/p*y;
    ll res=(unsigned long long)x*y-(unsigned long long)z*p;
    return (res+p)%p;
}
ll a,b,c;
int main()
{
    scanf("%lld%lld%lld",&a,&b,&c);
    printf("%lld\n",qmul(a,b,c));
    return 0;
}

AcWing 91. 最短Hamilton路径（状压DP）
给定一张 n个点的带权无向图，点从 0∼n−1标号，求起点0到终点n−1的最短Hamilton路径。Hamilton路径的定义是从0到n−1不重不漏地经过每个点恰好一次。

#include<bits/stdc++.h>
using namespace std;
using ll=long long;
ll n,m;
ll f[1<<20][20];
ll weight[20][20];
int main(){
    scanf("%lld",&n);
    for(int i=0;i<n;i++)
        for(int j=0;j<n;j++){
            scanf("%lld",&weight[i][j]);
    }
    memset(f,0x3f,sizeof f);//要求取最小值所以都初始化为最大值
    f[1][0]=0;
    for(int i=1;i<(1<<n);++i)
        for(int j=0;j<n;++j)
            //必须先判断一下状态i的第 j 位==1（也就是 j 点走过了）
            if((i>>j)&1)//因为第j点的状态是由没有走过 j 点的状态转移过来的,所以更新的是走过j点的数组
                for(int k=0;k<n;++k)//枚举所有能走到j 点的点
                    if(((i^(1<<j))>>k)&1)//如果当前的状态i 去掉j点之后的状态，走过k点的话就可以转移了//因为是从k走到j点的嘛
                        f[i][j]=min(f[i][j],f[i^(1<<j)][k]+weight[k][j]);//把i中的j去掉，必须是从未走过j点的状态转移到走过j点的状态+从k走到j的路程
    printf("%lld\n",f[(1<<n)-1][n-1]);
    return 0;
}