整数二分算法模板

bool check(int x) {/* ... */} // 检查x是否满足某种性质

// 区间[l, r]被划分成[l, mid]和[mid + 1, r]时使用：
int bsearch_1(int l, int r)
{
    while (l < r)
    {
        int mid = l + r >> 1;
        if (check(mid)) r = mid;    // check()判断mid是否满足性质
        else l = mid + 1;
    }
    return l;
}
// 区间[l, r]被划分成[l, mid - 1]和[mid, r]时使用：
int bsearch_2(int l, int r)
{
    while (l < r)
    {
        int mid = l + r + 1 >> 1;
        if (check(mid)) l = mid;
        else r = mid - 1;
    }
    return l;
}

Acwing102.最佳牛围栏（浮点二分）
#include<iostream>
#include<cstdio>
using namespace std;
const int N=100005;
 
int n,m,cows[N];
double eps=1e-5,sum[N];

bool check(double avg){
    for(int i=1;i<=n;i++){
        //前缀和求直接算剪掉当前答案（平均值）的和，
        //如果小于零则答案打了，大于零答案小了
        sum[i]=sum[i-1]+cows[i]-avg;
    }
    double minv=0;
    for(int i=0,j=m;j<=n;i++,j++){
        minv=min(minv,sum[i]);
        if(sum[j] - minv >= 0) return true;
    }
    return false;
}

int main(){
    cin>>n>>m;
    double l=0,r=0;
    for(int i=1;i<=n;i++){
        cin>>cows[i];
        r=max(r,(double)cows[i]);
    }
    while(r-l>eps){
        double mid=(l+r)/2;
        //如果小于零则答案打了，大于零答案小了
        if(check(mid)) l=mid;
        else r=mid;
    }
    cout<<(int)(r*1000)<<"\n";
    return 0;
}
Acwing113.特殊排序（有点类似归并排序）

// Forward declaration of compare API.
// bool compare(int a, int b);
// return bool means whether a is less than b.

class Solution {
public:
    vector<int> specialSort(int N) {
        vector<int> res;
        //假设原有一列res，现将i根据规则插入res
        res.push_back(1);//初始时将1插入
        for(int i=2;i<=N;i++){
            //从二开始遍历N个数，通过二分找插入位置
            //check（）函数就是compare
            res.push_back(i);//让边界判断方便
            //利用二分找到第一个大于i的位置r，其他元素向后移动一位
            int l=0,r=res.size()-1;
            while(l<r){
                int mid=(l+r)>>1;
                if(compare(i,res[mid])==true) r=mid;
                else l=mid+1;
            }
            /*
            边界判断：
            1、如果能找到第一个大于i的位置r，其他元素向后移动一位，
            从j=res.size()-2的位置开始与最后一位依次交换，直到i交换到i的位置r
            2、如果无法找到大于i的位置r，则i是最大的，i放在最后一位
            */
            //将元素i放到相应位置
            for(int j=res.size()-2;j>=r;j--){
                swap(res[j],res[j+1]);
            }
        }
        return res;
    }
};


