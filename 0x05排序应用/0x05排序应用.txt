离散化模板
void discrete(){
    sort(a+1,a+n+1);
    for(int i=1;i<=n;i++){
        if(i==1||a[i]!=a[i-1]){
            b[m++]=a[i];
        }
    }
}
int query(int x){
    return lower_bound(b+1,b+m+1,x)-b  //查找x被离散化成哪个数（二分）
}
Acwing103.电影
#include <iostream>
#include<cstdio>
#include <algorithm>
using namespace std;
int n,m,k=0,tot=0;
const int N=2e5+50;
//3*N是因为语言的来源有3个地方，假设都不相同，则有3*N种语言
int lang[3*N],uni[3*N],a[N],b[N],c[N],ans[3*N];
//find作用是把稀疏编号转为稠密编号
int find(int x){
    return lower_bound(uni+1,uni+1+k,x)-uni;
}
int main(){
    //保存科学家会的语言，并用lang记录
    scanf("%d",&n);
    for(int i=1;i<=n;i++){
        scanf("%d",&a[i]);
        lang[++tot]=a[i];
    }
    //保存电影音频的语言，并用lang记录
    scanf("%d",&m);
    for(int i=1;i<=m;i++){
        scanf("%d",&b[i]);
        lang[++tot]=b[i];
    }
    //保存电影字幕的语言，并用lang记录
    for(int i=1;i<=m;i++){
        scanf("%d",&c[i]);
        lang[++tot]=c[i];
    }
    //排序&&去重
    sort(lang+1,lang+1+tot);
    //把lang数组去重复，保存到uni数组
    //uni的数组下标做为每种语言(原有的1-10^9的稀疏编号）新的稠密编号
    for(int i=1;i<=tot;i++){
        if(i==1 || lang[i]!=lang[i-1]){
            uni[++k]=lang[i];
        }
    }
    //a[i]中保存原始的稀疏编号，用find转变成稠密编号，并用ans数组记录每种语言出现的次数。
     for(int i=1;i<=n;i++) ans[find(a[i])]++;
    //ans0表示最终答案，ans1,ans2表示中间答案
    int ans0=0,ans1=0,ans2=0;
    for(int i=1;i<=m;i++){
        //再分别考虑听懂和看懂
        int anx=ans[find(b[i])],any=ans[find(c[i])];
        //如果ans大于ans1或者前者相等且any大于ans2时，更新
        if(anx>ans1 || (anx==ans1 && any>ans2)){
            ans0=i,ans1=anx,ans2=any;
        }
        
    }
    //如果所有人都听不懂看不懂，随便选一个
    if(ans0==0){
        printf("%d\n",1);
    }else{
        printf("%d\n",ans0);
    }
    return 0;
}

AcWing 104. 货仓选址
中位数有非常优秀的性质，比如说在这道题目中，每一个点到中位数的距离，都是满足全局的最有性，
而不是局部最优性。具体的来说，我们设在仓库左边的所有点，到仓库的距离之和为p,
右边的距离之和则为q，那么我们就必须让p+q的值尽量小。
当仓库向左移动的话，p会减少x，但是q会增加n−x，所以说当为仓库中位数的时候,p+q最小。

#include <bits/stdc++.h>
using namespace std;
const int N=100100;
int a[N],n,i,ans,sum;
int main()
{
    cin>>n;
    for (i=1;i<=n;i++)
        cin>>a[i];
    sort(a+1,a+1+n);//排序
    int sm=a[n/2+1];//中位数
    for (i=1;i<=n;i++)
        ans=ans+abs(a[i]-sm);//统计和中位数之间的差
    cout<<ans;
    return 0;
}
Acwing105.七夕祭
/*
把题目拆成两个部分：
一、通过左右交换使每行感兴趣店铺数量相同
二、通过上下交换使每列感兴趣店铺数量相同
将每行的情况类比成Acwing1536的移动纸牌问题（此时有环）
其实就是横着做一遍，竖着再做一遍
    如果所有行（列）能被n（m）整除，则满足要求
计算步骤
    将所有数据都减去平均数，这样如果每行感兴趣的数量一样相加等于零（前缀和）
    要在第k个点将环打开，则前缀和数组s【i】中每个数要减去s【k】，
    此时移动步骤变为sum(s[i]-s[k])
        将整列排序后取中位数即可
    
*/
#include<iostream>
#include<algorithm>
using namespace std;
typedef long long ll;
const int N=1e5+5;
ll b[N],c[N],f[N];
ll n,m,t,x,y;
//计算移动次数
ll calc(ll a[N],ll n){
    ll ans=0;
    for(ll i=1;i<=n;i++){
        //每项减去平均值
        a[i]-=a[0]/n;
        //求前缀和
        f[i]=f[i-1]+a[i];
        //计算在第k位打开环移动次数(最小)
        }
        sort(f+1,f+n+1);
        for(ll i=1;i<=n;i++){
            ans+=abs(f[i]-f[(n+1)>>1]);
        }
    return ans;
}

int main(){
    cin>>n>>m>>t;
    while(t--){
        cin>>x>>y;
        b[x]++,c[y]++;
    }
    //计算和
    for(int i=1;i<=n;i++) b[0]+=b[i];
    for(int i=1;i<=m;i++) c[0]+=c[i];
    if(b[0]%n==0&&c[0]%m==0){
        cout<<"both "<<calc(b,n)+calc(c,m)<<"\n";
    }
    else if(b[0]%n==0){
        cout<<"row "<<calc(b,n)<<"\n";
    }
    else if(c[0]%m==0){
        cout<<"column "<<calc(c,m)<<"\n";
    }
    else cout<<"impossible"<<"\n";
    return 0;
}

Acwing106.动态中位数
/*
对顶堆
开两个堆，一个是大根堆，一个是小根堆，然后小于中位数的都放在大根堆，大于中位数的都放在小根堆，
如果说，一个堆的个数大于了当前序列的，那么就将多余的数移过去，直到两个堆数量相等。
*/

#include <iostream>
#include <algorithm>
#include <cstdio>
#include <cstring>
#include <queue>
#include <vector>
using namespace std;
struct cmp1
{
    bool operator ()(int &a,int &b)
    {
        return a>b;//小根堆，不是大根堆
    }
};
priority_queue <int,vector<int>, cmp1> q1,kong1;
priority_queue <int> q2,kong2;
void init()
{
    int t,x,n,now;
    cin>>t;
    while(t--)
    {
        cin>>x>>n;
        cout<<x<<" "<<(n+1)/2<<endl;
        q1=kong1;
        q2=kong2;
        int cnt=0;
        for (int i=1;i<=n;i++)
        {
            cin>>now;
            if(q1.empty())
                q1.push(now);
            else
            {
                if(now>q1.top()) 
                    q1.push(now);
                else 
                    q2.push(now);
                while(q1.size()<q2.size())
                {
                    q1.push(q2.top());
                    q2.pop();
                }
                while(q1.size()>q2.size()+1)
                {
                    q2.push(q1.top());
                    q1.pop();
                }
            }
            if (i&1)
            {
                cnt++;
                cout<<q1.top()<<" ";
                if (!(cnt%10)&&i!=n)
                    cout<<endl;
            }
        }
        puts("");
    }
}
int main()
{
    init();
    return 0;
}

AcWing107. 超快速排序
归并排序求逆序对
首先发现题目就是在模拟冒泡排序，而交换的次数，就是冒泡排序的交换次数就是我们的逆序对个数，至于求逆序对最快的方法，就是归并排序。

#include <bits/stdc++.h>
using namespace std;
const int N=501000;
#define ll long long
ll n,m,i,j,k,a[N],b[N],cnt;
void merge(ll a[],ll l,ll r)
{
    if (r-l<1)
        return ;
    ll mid=(l+r)>>1;
    merge(a,l,mid);
    merge(a,mid+1,r);
    ll i=l,j=mid+1;
    for (ll k=l;k<=r;k++)
    {
        if (j>r || i<=mid && a[i]<=a[j])
            b[k]=a[i++];
        else
        {
            cnt+=mid-i+1;
            b[k]=a[j++];
        }
    }
    for (ll k=l;k<=r;k++)
        a[k]=b[k];
}
int main()
{
    ios::sync_with_stdio(false);
    while(cin>>n && n)
    {
        for (i=1;i<=n;i++)
            cin>>a[i];
        cnt=0;
        merge(a,1,n);
        cout<<cnt<<endl;
    }
    return 0;
}

Acwing108. 奇数码问题
/*
经典八数码是否有解的判断，将N*N的矩阵看作一维，计算其逆序对个数
两个矩阵逆序对个数奇偶性相同则有解，反之则无解
*/
#include <cstdio>
#include <iostream>

const int MAXN = 500 * 500 + 5;
int arr[MAXN], brr[MAXN], b[MAXN];

long long cnt = 0;
// void mergeSort(int a[MAXN], int l, int mid, int r) {
//     int i = l, j = mid + 1;
//     for (int k = l; k <= r; k++) {
//         if(j > r || i <= mid && a[i] <= a[j]) b[k] = a[i++];
//         else b[k] = a[j++], cnt += mid - i + 1;
//     } for (int k = l; k <= r; k++) a[k] = b[k];
// }

void merge(int l, int r, int a[MAXN]) {
    if(l < r) {
        int mid = (l + r) >> 1;
        merge(l, mid, a);
        merge(mid + 1, r, a);
        int i = l, j = mid + 1;
        for (int k = l; k <= r; k++) {
            if(j > r || i <= mid && a[i] <= a[j]) b[k] = a[i++];
            else b[k] = a[j++], cnt += mid - i + 1;
        }   
        for (int k = l; k <= r; k++) a[k] = b[k];
    }
}

int main() {
    int n;
    while(scanf("%d", &n) != EOF) { //多组数据的输入方式
        int kx = 0, ky = 0;
        for (int i = 1; i <= n * n; i++) {
            int x = 0;
            scanf("%d", &x);
            if(x != 0) arr[++kx] = x;
        }
        for (int i = 1; i <= n * n; i++) {
            int x = 0;
            scanf("%d", &x);
            if(x != 0) brr[++ky] = x;
        }

        if(n == 1) { puts("TAK"); continue; }

        long long ans_arr = 0, ans_brr = 0;
        merge(1, kx, arr);
        // std::cout<<cnt<<std::endl;
        ans_arr = cnt, cnt = 0;
        merge(1, ky, brr);
        // std::cout<<cnt<<std::endl;
        ans_brr = cnt, cnt = 0;

        if((ans_arr & 1) != (ans_brr & 1)) puts("NIE");
        else if(std::abs(ans_brr - ans_arr) % 2 == 0) puts("TAK");
        else puts("NIE");
    } return 0;
}
