Acwing109. 天才ACM
#include<iostream>
#include<algorithm>
using namespace std;
typedef long long ll;
const int N=5e5+5;
ll w[N],t[N],T;
int n,m;
int ans;
ll tmp[N];
ll sq(ll x){
    return x*x;
}
// ll get(int l,int r){
//     int k=0;
//     //将目标区间存进t数组
//     for(int i=l;i<r;i++){
//         t[k++]=w[i];
//     }
//     //t数组排序求最大解
//     sort(t,t+k);
//     ll sum=0;
//     for(int i=0;i<m&&i<k;i++,k--){
//         sum+=sq(t[i]-t[k-1]);
//     }
//     return sum;
// }
//正常计算校验值会超时

//采用归并思想，在处理 [start,end)的时候，已经将 [start,end)
//排好序了，所以不需要在处理 [start,end+len)时再排序。
//处理 [start,end+len)时，只需要将 [end,end+len)排序，
//然后将 [start,end)与 [end,end+len)这两段区间进行归并即可


bool check(int l, int mid, int r)           
// 判断区间 [l, r) 是否合法，并将 t 中的 [l, mid) 区间和 [mid, r) 区间合并到 tmp 中
{
    for (int i = mid; i < r; i ++ )         
    // 将 w 数组的 [l, r) 区间复制到 t 的 [l, r) 区间中
        t[i] = w[i];
    sort(t + mid, t + r);                   
    // 将 t 的 [mid, r) 排序
    int i = l, j = mid, k = 0;              
    // 双指针进行区间合并
    while (i != mid && j != r)             
    // 当 i 不到 mid 且 j 不到 r 时，执行循环
        if (t[i] < t[j])                   
        // 如果 t[i] 比 t[j] 小，那么将 t[i] 放入 tmp 中
            tmp[k ++ ] = t[i ++ ]; 
        else                                
        // 否则将 t[j] 放入 tmp 中
            tmp[k ++ ] = t[j ++ ];
    while (i != mid) tmp[k ++ ] = t[i ++ ]; 
    // 处理剩下的元素
    while (j != r) tmp[k ++ ] = t[j ++ ];
    ll sum = 0;                             
    // 计算校验值
    for (i = 0; i < m && i < k; i ++ , k -- )
        sum += sq(tmp[i] - tmp[k - 1]);
    return sum <= T;                        
    // 返回当前区间 [l, r) 是否合法
}

int main(){
    int K;
    scanf("%d",&K);
    while(K--){
        scanf("%d %d %lld\n",&n, &m, &T);
        for(int i=0;i<n;i++)
            scanf("%lld",&w[i]);
        ans=0;
        int start=0,end=0;
        while(end<n){
            //倍增找区间
            int len=1;
            while(len){
                if(len+end<=n&&check(start,end,end+len)){
                    end+=len;
                    len<<=1;
                    if (end >= n) break ;               
                    // 一个小剪枝，如果 end >= n，那么直接跳出
                    for (int i = start; i < end; i ++ ) 
                    // 在 check 时，已经将 t 数组的 [start, end + len) 这段区间归并在 tmp 中了。现在只需要将 tmp 中的有序数组复制到 t 中即可
                        t[i] = tmp[i - start];         
                        // 复制的时候注意下标变换，tmp 是从 0 开始存的，t 是从 start 开始存的
                }
                else len>>=1;
            }
            start=end;
            ans++;
        }
        printf("%d\n",ans);
    }
    return 0;
}

Acwing110.防晒
贪心策略：将奶牛按照所需最小阳光进行从大到小的排序，
再将可选防晒霜分给奶牛，从大到小进行分配，优先保证前面的奶牛得到SPF最大的防晒霜

#include<iostream>
#include<cstring>
#include<algorithm>
#include<map>
using namespace std;
typedef pair<int,int> PII;
const int N=2510;
int n,m;
//记录奶牛的minspf和maxspf
PII cows[N];
int main(){
    cin>>n>>m;
    for(int i=1;i<=n;i++){
        cin>>cows[i].first>>cows[i].second;
    }
    //记录防晒霜的spf和cover
    map<int,int> spfs;
    int spf,cover;
    for(int i=1;i<=m;i++){
        cin>>spf>>cover;
        spfs[spf]+=cover;
    }
    //将每个奶牛按照minspf排序
    sort(cows+1,cows+n+1);
    int res=0;
    spfs[0]=spfs[1001]=n;//哨兵（平衡树技巧）
    for(int i=n;i>=1;i--){
        //upper_bound用于查找有序序列中大于某个给定值的第一个元素的迭代器,一定要升序排列
        auto spf=spfs.upper_bound(cows[i].second);
        //求不大于某个给定值的最后一个元素的迭代器
        spf--;
        if(cows[i].first<=spf->first){
            res++;
            //用过的种类cover-1
            --spf->second;
            //用完就把该种类删除
            if(spf->second==0){
                spfs.erase(spf);
            }
        }
    }
    cout<<res<<"\n";
    return 0;
}

Acwing111. 畜栏预定
#include<iostream>
#include<algorithm>
#include<queue>
using namespace std;
#define x first
#define y second
typedef pair<int,int> PII;
const int N=5e5+10;
//存储吃草区间、奶牛编号
pair<PII,int> cows[N];
int id[N];
int main(){
    int n;
    cin>>n;
    for(int i=1;i<=n;i++){
        cin>>cows[i].x.x>>cows[i].x.y;
        cows[i].y=i;
    }
    //将奶牛按照开始吃草的时间（区间左端点）进行从小到大排序
    sort(cows+1,cows+1+n,[](const auto& a,const auto& b){
        return a.x.x<b.x.x;
    });
    //开一个小根堆存储每个分组的右端和分组编号，堆顶为最小的右端值
    priority_queue<PII,vector<PII>,greater<PII> > heap;
    //遍历所有奶牛
    for(int i=1;i<=n;i++){
        //堆为空（最开始）或堆顶值大于当前左端值，新开一个分组，
        //并将分组放入堆中，分组编号为堆的大小+1
        if(heap.empty()||heap.top().x>=cows[i].x.x){
            PII stall={cows[i].x.y,heap.size()+1};
            id[cows[i].y]=stall.y;
            heap.push(stall);
        }
        //最小右端值（堆顶）小于当前牛左端值，拿出堆顶将牛分入该组
        else{
            auto stall=heap.top();
            heap.pop();
            stall.x=cows[i].x.y;
            id[cows[i].y]=stall.y;
            heap.push(stall);
        }
    }
    cout<<heap.size()<<"\n";
    for(int i=1;i<=n;i++) cout<<id[i]<<"\n";
    return 0;
    
}

Acwing112. 雷达设备
/*
将问题转化为一维的区间问题
将判断一个雷达能不能找到一个岛屿的问题转化成海岸线上的一个岛屿对应海岸线上一个可以放置雷达的区间
利用勾股定理算出距离，
点的坐标为（x,y），斜边距离为雷达搜索半径R，纵直角边为y，
则区间为[x-sqrt((R^2)-(y^2)),x+sqrt((R^2)-(y^2))]
有了区间就可以进行贪心策略，题目转化成保证每个区间都包含一个点的情况下放入最少的点
对区间按右端点进行从小到大的排序，遍历所有区间，每次与区间左端点比较，
满足条件则看下一个区间，不满足则在区间最右端放点
*/
#include<iostream>
#include<algorithm>
#include<cmath>
using namespace std;
typedef long long ll;
typedef pair<double,double> PDD;
const int N=1005;
const double eps=1e-5;
//用pair来储存岛屿对应的区间
PDD islands[N];
int main(){
    int n,r;
    cin>>n>>r;
    int x,y;
    bool able=true;
    for(int i=1;i<=n;i++){
        cin>>x>>y;
        if(r<y) {able=false;break;}
        double sqr=sqrt(r*r-y*y);
        islands[i].second=(double)x-sqr;
        islands[i].first=(double)x+sqr;
    }
    if(!able) {cout<<"-1"<<endl;return 0;}
    sort(islands+1,islands+1+n);
    // for(int i=1;i<=n;i++){
    //     cout<<islands[i].first<<islands[i].second<<"\n";
    // }
    int res=0;
    double cur=-0xfff;
    for(int i=1;i<=n;i++){
        auto is=islands[i];
        if(cur+eps<is.second){
            cur=is.first;
            //cout<<cur<<"\n";
            res++;
        }
        else continue;
    }
    cout<<res<<"\n";
    return 0;
}